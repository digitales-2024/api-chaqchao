// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid()) @unique
  name String
  email String
  password String
  phone String?
  lastLogin DateTime @default(now()) @db.Timestamptz(6)
  isActive Boolean @default(true)
  mustChangePassword Boolean  @default(true)
  createdUser User? @relation("CreatedUsers", fields: [createdBy], references: [id])
  createdBy String?
  updatedUser User? @relation("UpdatedUsers", fields: [updatedBy], references: [id])
  updatedBy String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  createdUsers User[] @relation("CreatedUsers")
  updatedUsers User[] @relation("UpdatedUsers")
  createdRols Rol[] @relation("CreatedRols")
  updatedRols Rol[] @relation("UpdatedRols")
  createdUserRols UserRol[] @relation("CreatedUserRols")
  updatedUserRols UserRol[] @relation("UpdatedUserRols")
  userRol UserRol? @relation("UserId")

  @@unique([email, isActive])
  
}

model Rol {
  id String @id @default(uuid()) @unique
  name String
  description String?
  isActive Boolean @default(true)
  createdRol User? @relation("CreatedRols", fields: [createdBy], references: [id])
  createdBy String?
  updatedRol User? @relation("UpdatedRols", fields: [updatedBy], references: [id])
  updatedBy String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  rolUsers UserRol[] @relation("RolId")
  rolPermissions Module_Permissions[] @relation("RolId")

  @@unique([name, isActive])
}

model UserRol {
  id String @id @default(uuid()) @unique
  user User @relation("UserId", fields: [userId], references: [id])
  userId String @unique
  rol Rol @relation("RolId",fields: [rolId], references: [id])
  rolId String
  isActive Boolean @default(true)
  createdUser User? @relation("CreatedUserRols", fields: [createdBy], references: [id])
  createdBy String?
  updatedUser User? @relation("UpdatedUserRols", fields: [updatedBy], references: [id])
  updatedBy String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  @@unique([userId, rolId, isActive])
}

model Permission{
  id String @id @default(uuid()) @unique
  name String @unique
  description String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  permissionModule Module_Permissions[] @relation("PermissionId")

}

model Module{
  id String @id @default(uuid()) @unique
  name String @unique
  description String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  modulePermissions Module_Permissions[] @relation("ModuleId")
}

model Module_Permissions{
  id String @id @default(uuid()) @unique
  module Module @relation("ModuleId", fields: [moduleId], references: [id])
  moduleId String
  permission Permission @relation("PermissionId", fields: [permissionId], references: [id])
  permissionId String
  rol Rol @relation("RolId", fields: [rolId], references: [id])
  rolId String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  @@unique([moduleId, permissionId])
}
