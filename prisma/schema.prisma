// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @unique @default(uuid())
  name               String
  email              String
  password           String
  phone              String?
  isSuperAdmin       Boolean  @default(false)
  lastLogin          DateTime @default(now()) @db.Timestamptz(6)
  isActive           Boolean  @default(true)
  mustChangePassword Boolean  @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con auditorías (acciones realizadas por este usuario)
  auditsPerformed Audit[] @relation("AuditPerformedBy")

  // Relación con UserRol
  userRols UserRol[] @relation("UserId")

  @@unique([email, isActive])
}

model Rol {
  id          String  @id @unique @default(uuid())
  name        String
  description String?
  isActive    Boolean @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con UserRol
  rolUsers UserRol[] @relation("RolId")

  // Relación con RolModulePermissions
  rolModulePermissions RolModulePermissions[] @relation("RolId")

  @@unique([name, isActive])
}

model UserRol {
  id       String  @id @unique @default(uuid())
  user     User    @relation("UserId", fields: [userId], references: [id])
  userId   String
  isActive Boolean @default(true)
  rol      Rol     @relation("RolId", fields: [rolId], references: [id])
  rolId    String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  @@unique([userId, rolId])
}

model Permission {
  id          String  @id @unique @default(uuid())
  cod         String
  name        String
  description String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con ModulePermissions
  permissionModule ModulePermissions[] @relation("PermissionId")

  @@unique([cod, name])
}

model Module {
  id          String  @id @unique @default(uuid())
  cod         String
  name        String
  description String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con ModulePermissions
  modulePermissions ModulePermissions[] @relation("ModuleId")

  @@unique([cod, name])
}

model ModulePermissions {
  id           String     @id @unique @default(uuid())
  module       Module     @relation("ModuleId", fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId     String
  permission   Permission @relation("PermissionId", fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con RolModulePermissions
  rolModulePermissions RolModulePermissions[] @relation("ModulePermissionsId")

  @@unique([moduleId, permissionId])
}

model RolModulePermissions {
  id                  String            @id @unique @default(uuid())
  rol                 Rol               @relation("RolId", fields: [rolId], references: [id], onDelete: Cascade)
  rolId               String
  modulePermissions   ModulePermissions @relation("ModulePermissionsId", fields: [modulePermissionsId], references: [id], onDelete: Cascade)
  modulePermissionsId String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  @@unique([rolId, modulePermissionsId])
}

model Audit {
  id            String          @id @unique @default(uuid())
  entityId      String
  entityType    String // Representa el nombre del modelo (ej: User, Rol, etc.)
  action        AuditActionType // Representa la acción (CREATE, UPDATE, DELETE)
  performedBy   User            @relation("AuditPerformedBy", fields: [performedById], references: [id])
  performedById String
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
}

enum AuditActionType {
  CREATE
  UPDATE
  DELETE
}

model BusinessConfig {
  id            String @id @unique @default(uuid())
  ruc           String @default("00000000000")
  businessName  String
  contactNumber String
  email         String
  address       String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación uno a muchos con BusinessHours
  businessHours           BusinessHours[]           @relation("businessId")
  ClassPriceConfig        ClassPriceConfig[]        @relation("businessId")
  ClassSchedule           ClassSchedule[]           @relation("businessId")
  ClassLanguage           ClassLanguage[]           @relation("businessId")
  ClassRegistrationConfig ClassRegistrationConfig[] @relation("businessId")
  ClassCapacity           ClassCapacity[]           @relation("businessId")

  @@unique([businessName, email])
}

model BusinessHours {
  id String @id @unique @default(uuid())

  // Clave foránea que referencia a BusinessConfig
  businessId String
  business   BusinessConfig @relation("businessId", fields: [businessId], references: [id])

  dayOfWeek   DayOfWeek
  openingTime String
  closingTime String
  isOpen      Boolean   @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model ClassPriceConfig {
  id String @id @unique @default(uuid())

  // Clave foránea que referencia a BusinessConfig
  businessId String
  business   BusinessConfig @relation("businessId", fields: [businessId], references: [id])
  typeClass  TypeClass      @default(NORMAL)

  classTypeUser ClassTypeUser
  price         Float
  typeCurrency  TypeCurrency

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

enum ClassTypeUser {
  ADULT
  CHILD
}

enum TypeCurrency {
  PEN
  USD
}

model ClassSchedule {
  id String @id @unique @default(uuid())

  // Clave foránea que referencia a BusinessConfig
  businessId String
  business   BusinessConfig @relation("businessId", fields: [businessId], references: [id])

  typeClass TypeClass @default(NORMAL)

  startTime String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  @@unique([typeClass, startTime])
}

model ClassLanguage {
  id String @id @unique @default(uuid())

  // Clave foránea que referencia a BusinessConfig
  businessId String
  business   BusinessConfig @relation("businessId", fields: [businessId], references: [id])

  languageName String   @unique
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt
}

model ClassRegistrationConfig {
  id String @id @unique @default(uuid())

  // Clave foránea que referencia a BusinessConfig
  businessId String
  business   BusinessConfig @relation("businessId", fields: [businessId], references: [id])

  closeBeforeStartInterval       Int
  finalRegistrationCloseInterval Int
  createdAt                      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt                      DateTime @updatedAt
}

model Product {
  id           String   @id @unique @default(uuid())
  name         String
  description  String?
  price        Float
  image        String?
  isAvailable  Boolean  @default(true)
  isActive     Boolean  @default(true)
  isRestricted Boolean? @default(false)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con Category
  category   Category @relation("categoryId", fields: [categoryId], references: [id])
  categoryId String

  cartItems CartItem[] @relation("ProductToCartItem") // Relación con CartItem

  // Relación con ProductVariation
  productVariations ProductVariation[] @relation("productId")
}

model Category {
  id String @id @unique @default(uuid())

  name        String  @unique
  family      Family  @default(CHOCOLAT)
  description String?
  isActive    Boolean @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con Product
  products Product[] @relation("categoryId")
}

enum Family {
  CHOCOLAT // Chocolate
  DRINK // Drink
  SPICES // Spices
  PERSONAL_CARE // Personal Care
  MERCH // Merchandise
  OTHER // Other
}

model ProductVariation {
  id String @id @unique @default(uuid())

  name            String
  description     String?
  additionalPrice Float

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con Product
  product   Product @relation("productId", fields: [productId], references: [id])
  productId String
}

model Client {
  id           String    @id @unique @default(uuid())
  name         String
  lastName     String?
  email        String    @unique
  phone        String?
  image        String?
  password     String?
  birthDate    DateTime?
  isGoogleAuth Boolean?
  token        String?
  lastLogin    DateTime  @default(now()) @db.Timestamptz(6)
  isActive     Boolean   @default(true)
  terms        Boolean   @default(true)

  // Relación con Notification
  notifications Notification[] @relation("ClientToNotificationRelation")

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
  carts     Cart[]   @relation("ClientToCart")
}

model Cart {
  id           String     @id @unique @default(uuid())
  tempId       String?    @unique
  clientId     String? // Asociado a un usuario autenticado
  client       Client?    @relation("ClientToCart", fields: [clientId], references: [id], onDelete: Cascade)
  cartItems    CartItem[] @relation("CartToCartItem")
  order        Order?     @relation("CartToOrder")
  orderId      String? // FK a Order
  cartStatus   CartStatus @default(PENDING)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  lastAccessed DateTime   @default(now())

  @@index([clientId])
  @@index([lastAccessed])
}

enum CartStatus {
  PENDING
  COMPLETED
}

model CartItem {
  id String @id @unique @default(uuid())

  // Relación con Cart
  cart   Cart   @relation(fields: [cartId], references: [id], name: "CartToCartItem")
  cartId String

  // Relación con Product
  productId String
  product   Product @relation(fields: [productId], references: [id], name: "ProductToCartItem")

  quantity  Int
  price     Float
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  @@index([cartId])
  @@index([productId])
}

model Order {
  id     String @id @unique @default(uuid())
  // Relación con Cart
  cart   Cart   @relation(fields: [cartId], references: [id], name: "CartToOrder")
  cartId String @unique

  customerName     String
  customerLastName String
  customerEmail    String
  customerPhone    String

  pickupCode    String?     @unique
  totalAmount   Float?
  pickupTime    DateTime
  orderStatus   OrderStatus
  pickupAddress String
  someonePickup Boolean?    @default(false)

  comments  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con Notification
  notifications Notification[] @relation("OrderToNotificationRelation")

  // Relación con BillingDocument
  billingDocument BillingDocument? @relation("OrderToBilling")

  @@index([cartId])
}

enum OrderStatus {
  PENDING // Pendiente
  CONFIRMED // Confirmado
  PROCESSING // Procesando
  COMPLETED // Completado
  CANCELLED // Cancelado
}

model BillingDocument {
  id String @id @unique @default(uuid())

  // Relación con Order
  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id], name: "OrderToBilling")

  billingDocumentType BillingDocumentType
  typeDocument        String
  documentNumber      String
  address             String
  city                String
  state               String
  country             String
  postalCode          String

  // Datos de la empresa
  businessName String?

  issuedAt      DateTime
  totalAmount   Float
  paymentStatus PaymentStatus
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime      @updatedAt
}

enum BillingDocumentType {
  INVOICE
  RECEIPT
}

enum PaymentStatus {
  PAID
  RUNNING
  UNPAID
  ABANDONED
}

model PickupCodeSequence {
  id         Int @id @default(1)
  currentSeq Int @default(0)
}

model Notification {
  id               String           @id @unique @default(uuid())
  description      String?
  notificationType NotificationType
  isRead           Boolean          @default(false)

  // Relación con Client
  clientId String
  client   Client @relation(fields: [clientId], references: [id], name: "ClientToNotificationRelation", map: "FK_Notification_Client")

  // Relación con Order
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], name: "OrderToNotificationRelation", map: "FK_Notification_Order")

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

enum NotificationType {
  ORDER_CONFIRMED
  ORDER_PREPARING
  ORDER_READY
  ORDER_PICKED_UP
  ORDER_CANCELLED
  PROMOTIONAL
  REMINDER
}

model Classes {
  id                String    @id @unique @default(uuid())
  typeClass         TypeClass @default(NORMAL)
  scheduleClass     String
  languageClass     String
  dateClass         DateTime
  totalParticipants Int       @default(0)
  isClosed          Boolean   @default(false)

  // Relacion con ClassRegister

  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime        @updatedAt
  ClassRegister ClassRegister[]
}

model ClassRegister {
  id String @id @unique @default(uuid())

  userName           String
  userEmail          String
  userPhone          String
  totalParticipants  Int
  totalAdults        Int
  totalChildren      Int
  totalPriceAdults   Float
  totalPriceChildren Float
  totalPrice         Float
  typeCurrency       TypeCurrency
  allergies          String?
  occasion           String?
  comments           String?
  status             ClassStatus    @default(PENDING)
  methodPayment      MethodPayment?

  // Campos de Paypal
  paypalOrderId     String?
  paypalOrderStatus String?
  paypalAmount      String?
  paypalCurrency    String?
  paypalDate        String?

  // Campos de Izipay
  izipayTransactionId  String?
  izipayAuthCode       String?
  izipayCardBrand      String?
  izipayLastFourDigits String?

  expiresAt DateTime

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  classesId String?
  Classes   Classes? @relation(fields: [classesId], references: [id])
}

enum MethodPayment {
  PAYPAL
  IZIPAY
}

enum TypeClass {
  NORMAL
  PRIVATE
  GROUP
}

enum ClassStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model ClassCapacity {
  id         String         @id @unique @default(uuid())
  businessId String
  business   BusinessConfig @relation("businessId", fields: [businessId], references: [id])

  typeClass TypeClass @default(NORMAL)

  minCapacity Int
  maxCapacity Int

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

model Claims {
  id                     String    @id @unique @default(uuid())
  claimantName           String
  claimantAddress        String?
  documentNumber         String
  claimantEmail          String
  claimantPhone          String
  claimantRepresentative String?
  assetType              AssetType
  amountClaimed          String?
  assetDescription       String
  claimDescription       String
  dateClaim              DateTime
}

enum AssetType {
  PRODUCT
  SERVICE
}
